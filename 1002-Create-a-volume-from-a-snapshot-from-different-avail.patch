From 83c3cb381d3cb135e6715252a51f468d82912d77 Mon Sep 17 00:00:00 2001
From: Jaroslav Pulchart <jaroslav.pulchart@gooddata.com>
Date: Wed, 17 Apr 2013 12:03:37 +0200
Subject: [PATCH] Create a volume from a snapshot at different volume av. zone.

Version 4 for openStack Folsom release:
- nova/db: Added new 'snapshot_get_host' and 'snapshot_get_all_by_host' API calls.
- nova/volume: Export all snapshot as iSCSI targets at Start of nova-volume
- nova/volume: Export snapshot as iSCSI targets at snapschot create
- nova/volume: Remove snapshot iSCSI target at snapschot delete
- nova/volume: Use iSCSI snapshot target as source for volume creating, filtered by 'iscsi_ip_filter' parameter.
- Do not use iscsi discovery if we know host name.

others
---
 nova/db/api.py            |  14 ++-
 nova/db/sqlalchemy/api.py |  80 +++++++++++++++-
 nova/volume/driver.py     | 237 ++++++++++++++++++++++++++++++++++++----------
 nova/volume/iscsi.py      |  24 ++++-
 nova/volume/manager.py    |  22 ++++-
 5 files changed, 317 insertions(+), 60 deletions(-)

diff --git a/nova/db/api.py b/nova/db/api.py
index 9f2ff73..2f8c00e 100644
--- a/nova/db/api.py
+++ b/nova/db/api.py
@@ -1132,9 +1132,9 @@ def volume_get_by_ec2_id(context, ec2_id):
     return IMPL.volume_get_by_ec2_id(context, ec2_id)
 
 
-def volume_get_iscsi_target_num(context, volume_id):
+def volume_get_iscsi_target_num(context, volume_id, host = "all"):
     """Get the target num (tid) allocated to the volume."""
-    return IMPL.volume_get_iscsi_target_num(context, volume_id)
+    return IMPL.volume_get_iscsi_target_num(context, volume_id, host)
 
 
 def volume_update(context, volume_id, values):
@@ -1193,6 +1193,16 @@ def snapshot_get_all(context):
     return IMPL.snapshot_get_all(context)
 
 
+def snapshot_get_all_by_host(context, host):
+    """Get all snapshots belonging to a host."""
+    return IMPL.snapshot_get_all_by_host(context, host)
+
+
+def snapshot_get_host(context, snapshot_id):
+    """Get a snapshot host or raise if it does not exist."""
+    return IMPL.snapshot_get_host(context, snapshot_id)
+
+
 def snapshot_get_all_by_project(context, project_id):
     """Get all snapshots belonging to a project."""
     return IMPL.snapshot_get_all_by_project(context, project_id)
diff --git a/nova/db/sqlalchemy/api.py b/nova/db/sqlalchemy/api.py
index b421a42..878639a 100644
--- a/nova/db/sqlalchemy/api.py
+++ b/nova/db/sqlalchemy/api.py
@@ -3027,6 +3027,12 @@ def _volume_get_query(context, session=None, project_only=False):
 
 
 @require_context
+def _snapshot_get_query(context, session=None, project_only=False):
+    return model_query(context, models.Snapshot, session=session,
+                       project_only=project_only)
+
+
+@require_context
 def _ec2_volume_get_query(context, session=None):
     return model_query(context, models.VolumeIdMapping,
                        session=session, read_deleted='yes')
@@ -3049,6 +3055,17 @@ def volume_get(context, volume_id, session=None):
 
     return result
 
+@require_context
+def snapshot_get(context, snapshot_id, session=None):
+    result = _snapshot_get_query(context, session=session, project_only=True).\
+                    filter_by(id=snapshot_id).\
+                    first()
+
+    if not result:
+        raise exception.SnapshotNotFound(snapshot_id=snapshot_id)
+
+    return result
+
 
 @require_admin_context
 def volume_get_all(context):
@@ -3081,10 +3098,16 @@ def volume_get_all_by_project(context, project_id):
 
 
 @require_admin_context
-def volume_get_iscsi_target_num(context, volume_id):
-    result = model_query(context, models.IscsiTarget, read_deleted="yes").\
-                     filter_by(volume_id=volume_id).\
-                     first()
+def volume_get_iscsi_target_num(context, volume_id, host = "all"):
+    if host != "all":
+        result = model_query(context, models.IscsiTarget, read_deleted="yes").\
+                        filter_by(volume_id=volume_id).\
+                        filter_by(host=host).\
+                        first()
+    else:
+        result = model_query(context, models.IscsiTarget, read_deleted="yes").\
+                        filter_by(volume_id=volume_id).\
+                        first()
 
     if not result:
         raise exception.ISCSITargetNotFoundForVolume(volume_id=volume_id)
@@ -3281,11 +3304,17 @@ def snapshot_create(context, values):
 def snapshot_destroy(context, snapshot_id):
     session = get_session()
     with session.begin():
+        snapshot_ref = snapshot_get(context, snapshot_id, session=session)
         session.query(models.Snapshot).\
                 filter_by(id=snapshot_id).\
                 update({'deleted': True,
                         'deleted_at': timeutils.utcnow(),
                         'updated_at': literal_column('updated_at')})
+        session.query(models.IscsiTarget).\
+                filter_by(volume_id=snapshot_id).\
+                update({'snapshot_id': None})
+
+    return snapshot_ref
 
 
 @require_context
@@ -3301,6 +3330,49 @@ def snapshot_get(context, snapshot_id, session=None):
     return result
 
 
+#@require_admin_context
+#@require_context
+# context removed due to "AttributeError: 'ISCSIDriver' object has no attribute 'is_admin'"
+def snapshot_get_all_by_host(context, host):
+    session = get_session()
+    my_filter = and_(or_(models.Snapshot.status == 'available',
+                         models.Snapshot.status == 'error'),
+                     models.Snapshot.deleted == False,
+                     models.Volume.host == host)
+    with session.begin():
+        results = session.query(models.Snapshot).\
+                         join((models.Volume,
+                               models.Volume.id==models.Snapshot.volume_id)).\
+                         filter(my_filter).\
+                         all()
+        return results
+
+
+#@require_admin_context
+#@require_context
+# context removed due to "AttributeError: 'ISCSIDriver' object has no attribute 'is_admin'"
+def snapshot_get_host(context, snapshot_id):
+    session = get_session()
+    my_filter = and_(or_(models.Snapshot.status == 'available',
+                         models.Snapshot.status == 'error',
+                         models.Snapshot.status == 'deleting',
+                         models.Snapshot.status == 'error_deleting'),
+                     models.Snapshot.id==snapshot_id,
+                     models.Snapshot.deleted == False)
+    with session.begin():
+        results = session.query(models.Volume.provider_location).\
+                         join((models.Snapshot,
+                               models.Volume.id==models.Snapshot.volume_id)).\
+                         filter(my_filter).\
+                         first()
+        try:
+             result = results[0].split()[0].split(":")[0]
+        except:
+             result = Null
+
+        return result
+
+
 @require_admin_context
 def snapshot_get_all(context):
     return model_query(context, models.Snapshot).all()
diff --git a/nova/volume/driver.py b/nova/volume/driver.py
index fda127d..3dcea65 100644
--- a/nova/volume/driver.py
+++ b/nova/volume/driver.py
@@ -33,6 +33,8 @@ from nova.openstack.common import log as logging
 from nova import utils
 from nova.volume import iscsi
 
+from nova import db
+from socket import gethostbyname
 
 LOG = logging.getLogger(__name__)
 
@@ -55,6 +57,9 @@ volume_opts = [
     cfg.StrOpt('iscsi_ip_address',
                default='$my_ip',
                help='use this ip for iscsi'),
+    cfg.StrOpt('iscsi_ip_prefix',
+               default='$my_ip',
+               help='use this ip prefix as iscsi discovery filter'),
     cfg.IntOpt('iscsi_port',
                default=3260,
                help='The port that the iSCSI daemon is listening on'),
@@ -175,11 +180,87 @@ class VolumeDriver(object):
         changes to the volume object to be persisted."""
         self._create_volume(volume['name'], self._sizestr(volume['size']))
 
+    @utils.synchronized('create_volume_from_snapshot')
     def create_volume_from_snapshot(self, volume, snapshot):
         """Creates a volume from a snapshot."""
         self._create_volume(volume['name'], self._sizestr(volume['size']))
-        self._copy_volume(self.local_path(snapshot), self.local_path(volume),
-                          snapshot['volume_size'])
+
+        connection_info = self.initialize_connection(snapshot,0)
+        storage_path = self._register_storage(connection_info)
+        try:
+            self._copy_volume(storage_path, self.local_path(volume),
+                              snapshot['volume_size'])
+        finally:
+            self._unregister_storage(connection_info)
+
+    def _register_storage(self, connection_info):
+        """Register the storage to nova-volume node"""
+        iscsi_properties = connection_info['data']
+        try:
+            self._run_iscsiadm(iscsi_properties, ())
+        except exception.ProcessExecutionError as exc:
+            # iscsiadm returns 21 for "No records found" after version 2.0-871
+            if exc.exit_code in [21, 255]:
+                self._run_iscsiadm(iscsi_properties, ('--op', 'new'))
+            else:
+                raise
+
+        if iscsi_properties.get('auth_method'):
+            self._iscsiadm_update(iscsi_properties,
+                                  "node.session.auth.authmethod",
+                                  iscsi_properties['auth_method'])
+            self._iscsiadm_update(iscsi_properties,
+                                  "node.session.auth.username",
+                                  iscsi_properties['auth_username'])
+            self._iscsiadm_update(iscsi_properties,
+                                  "node.session.auth.password",
+                                  iscsi_properties['auth_password'])
+
+        self._run_iscsiadm(iscsi_properties, ("--login",),
+                           check_exit_code=[0, 255])
+
+        self._iscsiadm_update(iscsi_properties, "node.startup", "automatic")
+
+        host_device = ("/dev/disk/by-path/ip-%s-iscsi-%s-lun-%s" %
+                        (iscsi_properties['target_portal'],
+                         iscsi_properties['target_iqn'],
+                         iscsi_properties.get('target_lun', 0)))
+
+        # The /dev/disk/by-path/... node is not always present immediately
+        # TODO(justinsb): This retry-with-delay is a pattern, move to utils?
+        tries = 0
+        while not os.path.exists(host_device):
+            if tries >= FLAGS.num_iscsi_scan_tries:
+                raise exception.NovaException(_("iSCSI device not found at %s") %
+                                      (host_device))
+
+            LOG.warn(_("ISCSI volume not yet found. "
+                       "Will rescan & retry.  Try number: %(tries)s") %
+                     locals())
+
+            # The rescan isn't documented as being necessary(?), but it helps
+            self._run_iscsiadm(iscsi_properties, ("--rescan",))
+
+            tries = tries + 1
+            if not os.path.exists(host_device):
+                time.sleep(tries ** 2)
+
+        if tries != 0:
+            LOG.debug(_("Found iSCSI node. "
+                        "(after %(tries)s rescans)") %
+                      locals())
+
+        connection_info['data']['device_path'] = host_device
+        return host_device
+
+    def _unregister_storage(self, connection_info):
+        """Detach the storage from nova-volume node"""
+        iscsi_properties = connection_info['data']
+        self._iscsiadm_update(iscsi_properties, "node.startup", "manual")
+        self._run_iscsiadm(iscsi_properties, ("--logout",),
+                           check_exit_code=[0, 255])
+        self._run_iscsiadm(iscsi_properties, ('--op', 'delete'),
+                           check_exit_code=[0, 255])
 
     def delete_volume(self, volume):
         """Deletes a logical volume."""
@@ -312,15 +393,26 @@ class ISCSIDriver(VolumeDriver):
         super(ISCSIDriver, self).set_execute(execute)
         self.tgtadm.set_execute(execute)
 
-    def ensure_export(self, context, volume):
+    def ensure_export(self, context, volume, host = "localhost"):
         """Synchronously recreates an export for a logical volume."""
         # NOTE(jdg): tgtadm doesn't use the iscsi_targets table
         # TODO(jdg): In the future move all of the dependent stuff into the
         # cooresponding target admin class
+
+        try:
+            # Volume
+            my_host = volume['host']
+            issnapshot = 0
+        except:
+            # Snapshot
+            my_host = host
+            issnapshot = 1
+ 
         if not isinstance(self.tgtadm, iscsi.TgtAdm):
             try:
                 iscsi_target = self.db.volume_get_iscsi_target_num(context,
-                                                               volume['id'])
+                                                               volume['id'],
+                                                               my_host)
             except exception.NotFound:
                 LOG.info(_("Skipping ensure_export. No iscsi_target "
                            "provisioned for volume: %s"), volume['id'])
@@ -331,7 +423,7 @@ class ISCSIDriver(VolumeDriver):
         # Check for https://bugs.launchpad.net/nova/+bug/1065702
         old_name = None
         volume_name = volume['name']
-        if (volume['provider_location'] is not None and
+        if not issnapshot and (volume['provider_location'] is not None and
             volume['name'] not in volume['provider_location']):
 
             msg = _('Detected inconsistency in provider_location id')
@@ -411,11 +503,19 @@ class ISCSIDriver(VolumeDriver):
                 target = {'host': host, 'target_num': target_num}
                 self.db.iscsi_target_create_safe(context, target)
 
-    def create_export(self, context, volume):
+    def create_export(self, context, storage, host = 'localhost'):
         """Creates an export for a logical volume."""
+        try:
+            # Volume
+            my_host = storage['host']
+        except:
+            # Snapshot
+            my_host = host
 
-        iscsi_name = "%s%s" % (FLAGS.iscsi_target_prefix, volume['name'])
-        volume_path = "/dev/%s/%s" % (FLAGS.volume_group, volume['name'])
+        self._ensure_iscsi_targets(context, my_host)
+
+        iscsi_name = "%s%s" % (FLAGS.iscsi_target_prefix, storage['name'])
+        storage_path = "/dev/%s/%s" % (FLAGS.volume_group, storage['name'])
 
         model_update = {}
 
@@ -423,10 +523,11 @@ class ISCSIDriver(VolumeDriver):
         # cooresponding target admin class
         if not isinstance(self.tgtadm, iscsi.TgtAdm):
             lun = 0
-            self._ensure_iscsi_targets(context, volume['host'])
+            self._ensure_iscsi_targets(context, storage['host'])
             iscsi_target = self.db.volume_allocate_iscsi_target(context,
-                                                                volume['id'],
-                                                                volume['host'])
+                                                                storage['id'],
+                                                                storage['host'],
+                                                                my_host)
         else:
             lun = 1  # For tgtadm the controller is lun 0, dev starts at lun 1
             iscsi_target = 0  # NOTE(jdg): Not used by tgtadm
@@ -436,25 +537,29 @@ class ISCSIDriver(VolumeDriver):
         tid = self.tgtadm.create_iscsi_target(iscsi_name,
                                               iscsi_target,
                                               0,
-                                              volume_path)
+                                              storage_path)
         model_update['provider_location'] = _iscsi_location(
             FLAGS.iscsi_ip_address, tid, iscsi_name, lun)
         return model_update
 
-    def remove_export(self, context, volume):
-        """Removes an export for a logical volume."""
+    def remove_export(self, context, storage, host = "localhost"):
+        """Removes an export for a logical volume or a snapshot."""
+        try:
+            # Volume
+            my_host = storage['host']
+            issnapshot=False
+        except:
+            # Snapshot
+            my_host = host
+            issnapshot=True
 
         # NOTE(jdg): tgtadm doesn't use the iscsi_targets table
         # TODO(jdg): In the future move all of the dependent stuff into the
         # cooresponding target admin class
         if not isinstance(self.tgtadm, iscsi.TgtAdm):
-            try:
-                iscsi_target = self.db.volume_get_iscsi_target_num(context,
-                                                               volume['id'])
-            except exception.NotFound:
-                LOG.info(_("Skipping remove_export. No iscsi_target "
-                           "provisioned for volume: %s"), volume['id'])
-                return
+            iscsi_target = self.db.volume_get_iscsi_target_num(context,
+                                                               storage['id'],
+                                                               my_host)
         else:
             iscsi_target = 0
 
@@ -462,7 +567,7 @@ class ISCSIDriver(VolumeDriver):
 
             # NOTE: provider_location may be unset if the volume hasn't
             # been exported
-            location = volume['provider_location'].split(' ')
+            location = storage['provider_location'].split(' ')
             iqn = location[1]
 
             # ietadm show will exit with an error
@@ -470,23 +575,29 @@ class ISCSIDriver(VolumeDriver):
             self.tgtadm.show_target(iscsi_target, iqn=iqn)
         except Exception as e:
             LOG.info(_("Skipping remove_export. No iscsi_target "
-                       "is presently exported for volume: %s"), volume['id'])
-            return
+                       "is presently exported for volume or snapshot: %s. Removing as discovered device."), storage['id'])
+
+            # Discovered iSCSI device, have to be removed by IQN
+            try:
+                iscsi_properties = self._get_iscsi_properties(storage)
+                self.tgtadm.delete_target_iqn(iscsi_properties['target_iqn'])
+            except Exception as e:
+                LOG.info(_("Not a discovered device, skipping."))
 
-        self.tgtadm.remove_iscsi_target(iscsi_target, 0, volume['id'])
+        self.tgtadm.remove_iscsi_target(iscsi_target, 0, storage['id'], issnapshot=issnapshot)
 
-    def _do_iscsi_discovery(self, volume):
+    def _do_iscsi_discovery(self, storage, host):
         #TODO(justinsb): Deprecate discovery and use stored info
         #NOTE(justinsb): Discovery won't work with CHAP-secured targets (?)
         LOG.warn(_("ISCSI provider_location not stored, using discovery"))
 
-        volume_name = volume['name']
+        storage_name = storage['name']
 
         (out, _err) = self._execute('iscsiadm', '-m', 'discovery',
-                                    '-t', 'sendtargets', '-p', volume['host'],
+                                    '-t', 'sendtargets', '-p', host,
                                     run_as_root=True)
         for target in out.splitlines():
-            if FLAGS.iscsi_ip_address in target and volume_name in target:
+            if FLAGS.iscsi_ip_prefix in target and storage_name in target:
                 return target
         return None
 
@@ -516,21 +627,35 @@ class ISCSIDriver(VolumeDriver):
 
         properties = {}
 
-        location = volume['provider_location']
-
-        if location:
+        try:
+            location = volume['provider_location']
             # provider_location is the same format as iSCSI discovery output
             properties['target_discovered'] = False
-        else:
-            location = self._do_iscsi_discovery(volume)
-
-            if not location:
-                raise exception.InvalidVolume(_("Could not find iSCSI export "
-                                                " for volume %s") %
-                                              (volume['name']))
+        except:
+            try:
+                # Volume has host name
+                my_host = volume['host']
+            except:
+                # snapshot is near volume
+                my_host = db.snapshot_get_host(self,volume['id'])
 
-            LOG.debug(_("ISCSI Discovery: Found %s") % (location))
-            properties['target_discovered'] = True
+            try:
+                LOG.debug(_("ISCSI provider_location not stored, using estimation"))
+                iscsi_name = "%s%s" % (FLAGS.iscsi_target_prefix, volume['name'])
+                iscsi_target = 1
+                location = _iscsi_location (gethostbyname(my_host), iscsi_target, iscsi_name)
+                properties['target_discovered'] = False
+            except:
+                LOG.debug(_("ISCSI Discovery: Starting."))
+                location = self._do_iscsi_discovery(volume,my_host)
+
+                if not location:
+                    raise exception.Error(_("Could not find iSCSI export "
+                                            "for volume or snapshot %s") %
+                                          (volume['name']))
+
+                LOG.debug(_("ISCSI Discovery: Found %s") % (location))
+                properties['target_discovered'] = True
 
         results = location.split(" ")
         properties['target_portal'] = results[0].split(",")[0]
@@ -545,21 +670,31 @@ class ISCSIDriver(VolumeDriver):
 
         properties['volume_id'] = volume['id']
 
-        auth = volume['provider_auth']
-        if auth:
-            (auth_method, auth_username, auth_secret) = auth.split()
-
-            properties['auth_method'] = auth_method
-            properties['auth_username'] = auth_username
-            properties['auth_password'] = auth_secret
-
+        try:
+           auth = volume['provider_auth']
+           if auth:
+               (auth_method, auth_username, auth_secret) = auth.split()
+
+               properties['auth_method'] = auth_method
+               properties['auth_username'] = auth_username
+               properties['auth_password'] = auth_secret
+        except:
+               # TBD: use auth from snapshot's volume id
+               LOG.debug(_("ISCSI Discovery: None auth methos"))
+               properties['auth_method'] = ""
+               properties['auth_username'] = ""
+               properties['auth_password'] = ""
+
+        LOG.debug(_("ISCSI properties: %s.") % properties)
         return properties
 
-    def _run_iscsiadm(self, iscsi_properties, iscsi_command):
+    def _run_iscsiadm(self, iscsi_properties, iscsi_command, **kwargs):
+        check_exit_code = kwargs.pop('check_exit_code', 0)
         (out, err) = self._execute('iscsiadm', '-m', 'node', '-T',
                                    iscsi_properties['target_iqn'],
                                    '-p', iscsi_properties['target_portal'],
-                                   *iscsi_command, run_as_root=True)
+                                   *iscsi_command, run_as_root=True,
+                                   check_exit_code=check_exit_code)
         LOG.debug("iscsiadm %s: stdout=%s stderr=%s" %
                   (iscsi_command, out, err))
         return (out, err)
diff --git a/nova/volume/iscsi.py b/nova/volume/iscsi.py
index c1bbf96..e39fa22 100644
--- a/nova/volume/iscsi.py
+++ b/nova/volume/iscsi.py
@@ -159,11 +159,26 @@ class TgtAdm(TargetAdmin):
 
     def remove_iscsi_target(self, tid, lun, vol_id, **kwargs):
         LOG.info(_('Removing volume: %s') % vol_id)
-        vol_uuid_file = 'volume-%s' % vol_id
+        try:
+           snapshot=kwargs['issnapshot']
+        except:
+           snapshot=False
+
+        if snapshot:
+            logmsg = "Snapshot"
+            vol_uuid_file = "snap-%s" % vol_id
+        else:
+            logmsg = "Volume"
+            vol_uuid_file = FLAGS.volume_name_template % vol_id
         volume_path = os.path.join(FLAGS.volumes_dir, vol_uuid_file)
+
+        LOG.debug('%s path = %s' % (logmsg, volume_path))
+        LOG.debug('%s uuid file = %s' % (logmsg,vol_uuid_file))
+
         if os.path.isfile(volume_path):
             iqn = '%s%s' % (FLAGS.iscsi_target_prefix,
                             vol_uuid_file)
+            LOG.debug('%s iqn = %s' % (logmsg, iqn))
         else:
             raise exception.ISCSITargetRemoveFailed(volume_id=vol_id)
         try:
@@ -178,6 +193,13 @@ class TgtAdm(TargetAdmin):
 
         os.unlink(volume_path)
 
+    def delete_target_iqn(self, target_iqn=None, **kwargs):
+        if target_iqn is None:
+            raise exception.InvalidParameterValue(
+                err=_('valid iqn needed for delete_target'))
+
+        self._execute("tgt-admin", "--delete", target_iqn, run_as_root=True, **kwargs)
+
     def show_target(self, tid, iqn=None, **kwargs):
         if iqn is None:
             raise exception.InvalidParameterValue(
diff --git a/nova/volume/manager.py b/nova/volume/manager.py
index 178fa91..f30f66d 100644
--- a/nova/volume/manager.py
+++ b/nova/volume/manager.py
@@ -102,10 +102,21 @@ class VolumeManager(manager.SchedulerDependentManager):
         LOG.debug(_("Re-exporting %s volumes"), len(volumes))
         for volume in volumes:
             if volume['status'] in ['available', 'in-use']:
-                self.driver.ensure_export(ctxt, volume)
+                self.driver.ensure_export(ctxt, volume, self.host)
             else:
                 LOG.info(_("volume %s: skipping export"), volume['name'])
 
+        snapshots = self.db.snapshot_get_all_by_host(ctxt, self.host)
+        LOG.debug(_("Re-exporting %s snapshots"), len(snapshots))
+        for snapshot in snapshots:
+            if snapshot['status'] == 'available':
+                 try:
+                    self.driver.ensure_export(ctxt, snapshot, self.host)
+                 except:
+                    LOG.debug(_("Re-exporting of %s snapshots failed."), snapshot['name'])
+            else:
+                LOG.info(_("snapshot %s: skipping export"), snapshot['name'])
+ 
         LOG.debug(_('Resuming any in progress delete operations'))
         for volume in volumes:
             if volume['status'] == 'deleting':
@@ -198,7 +209,7 @@ class VolumeManager(manager.SchedulerDependentManager):
             self.driver.delete_volume(volume_ref)
         except exception.VolumeIsBusy:
             LOG.debug(_("volume %s: volume is busy"), volume_ref['name'])
-            self.driver.ensure_export(context, volume_ref)
+            self.driver.ensure_export(context, volume_ref, self.host)
             self.db.volume_update(context, volume_ref['id'],
                                   {'status': 'available'})
             return True
@@ -236,6 +247,10 @@ class VolumeManager(manager.SchedulerDependentManager):
             snap_name = snapshot_ref['name']
             LOG.debug(_("snapshot %(snap_name)s: creating") % locals())
             model_update = self.driver.create_snapshot(snapshot_ref)
+
+            LOG.debug(_("snapshot %s: creating iSCSI export"), snapshot_ref['name'])
+            self.driver.create_export(context, snapshot_ref, self.host)
+
             if model_update:
                 self.db.snapshot_update(context, snapshot_ref['id'],
                                         model_update)
@@ -258,10 +273,13 @@ class VolumeManager(manager.SchedulerDependentManager):
         snapshot_ref = self.db.snapshot_get(context, snapshot_id)
 
         try:
+            LOG.debug(_("snapshot %s: removing export"), snapshot_ref['name'])
+            self.driver.remove_export(context, snapshot_ref, self.host)
             LOG.debug(_("snapshot %s: deleting"), snapshot_ref['name'])
             self.driver.delete_snapshot(snapshot_ref)
         except exception.SnapshotIsBusy:
             LOG.debug(_("snapshot %s: snapshot is busy"), snapshot_ref['name'])
+            self.driver.ensure_export(context, snapshot_ref, self.host)
             self.db.snapshot_update(context,
                                     snapshot_ref['id'],
                                     {'status': 'available'})
-- 
1.8.1.4

