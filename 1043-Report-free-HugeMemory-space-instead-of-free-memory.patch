From e50c0cdc13ae7193dec9143622f5516b6a04631a Mon Sep 17 00:00:00 2001
From: Jaroslav Pulchart <jaroslav.pulchart@gooddata.com>
Date: Mon, 8 Jul 2013 09:02:22 +0200
Subject: [PATCH] FEATURE: PCI-1523 Report free HugeMemory space instead of
 free memory when hugepages are used.

---
 nova/virt/libvirt/driver.py | 28 ++++++++++++++++++++++++----
 1 file changed, 24 insertions(+), 4 deletions(-)

diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index 619ddd7..426562c 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -2041,8 +2041,18 @@ class LibvirtDriver(driver.ComputeDriver):
         :returns: the total amount of memory(MB).
 
         """
+        if FLAGS.libvirt_hugepages:
+            if sys.platform.upper() not in ['LINUX2', 'LINUX3']:
+                return 0
+
+            m = open('/proc/meminfo').read().split()
+            idx1 = m.index('HugePages_Total:')
+            idx2 = m.index('Hugepagesize:')
 
-        return self._conn.getInfo()[1]
+            total_kb = int(m[idx1 + 1]) * int(m[idx2 + 1])
+            return int(total_kb / 1024)
+        else:
+            return self._conn.getInfo()[1]
 
     @staticmethod
     def get_local_gb_total():
@@ -2097,6 +2107,12 @@ class LibvirtDriver(driver.ComputeDriver):
         idx1 = m.index('MemFree:')
         idx2 = m.index('Buffers:')
         idx3 = m.index('Cached:')
+
+        if FLAGS.libvirt_hugepages:
+            idx4 = m.index('HugePages_Total:')
+            idx5 = m.index('HugePages_Free:')
+            idx6 = m.index('Hugepagesize:')
+
         if FLAGS.libvirt_type == 'xen':
             used = 0
             for domain_id in self.list_instance_ids():
@@ -2114,9 +2130,13 @@ class LibvirtDriver(driver.ComputeDriver):
             # Convert it to MB
             return used / 1024
         else:
-            avail = (int(m[idx1 + 1]) + int(m[idx2 + 1]) + int(m[idx3 + 1]))
-            # Convert it to MB
-            return self.get_memory_mb_total() - avail / 1024
+            if FLAGS.libvirt_hugepages:
+                used_kb = (int(m[idx4 + 1]) - int(m[idx5 + 1])) * int(m[idx6 + 1])
+                return used_kb / 1024
+            else:
+                avail = (int(m[idx1 + 1]) + int(m[idx2 + 1]) + int(m[idx3 + 1]))
+                # Convert it to MB
+                return self.get_memory_mb_total() - avail / 1024
 
     def get_local_gb_used(self):
         """Get the free hdd size(GB) of physical computer.
-- 
1.8.3.1

