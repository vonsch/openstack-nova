diff --git a/nova/virt/disk/api.py b/nova/virt/disk/api.py
index ab63a89..6032e4a 100644
--- a/nova/virt/disk/api.py
+++ b/nova/virt/disk/api.py
@@ -65,8 +65,8 @@ disk_opts = [
     #
     cfg.MultiStrOpt('virt_mkfs',
                     default=[
-                      'default=mkfs.ext3 -L %(fs_label)s -F %(target)s',
-                      'linux=mkfs.ext3 -L %(fs_label)s -F %(target)s',
+                      'default=mkfs.ext4 -L %(fs_label)s -F %(target)s',
+                      'linux=mkfs.ext4 -L %(fs_label)s -F %(target)s',
                       'windows=mkfs.ntfs'
                       ' --force --fast --label %(fs_label)s %(target)s',
                       # NOTE(yamahata): vfat case
diff --git a/nova/virt/libvirt/imagebackend.py b/nova/virt/libvirt/imagebackend.py
index 0f2f044..cf38234 100644
--- a/nova/virt/libvirt/imagebackend.py
+++ b/nova/virt/libvirt/imagebackend.py
@@ -214,6 +214,12 @@ class Lvm(Image):
                                            size, sparse=self.sparse)
             with self.remove_volume_on_error(self.path):
                 prepare_template(target=self.path, *args, **kwargs)
+
+            # TODO: fs_format depend on used OS at guest
+            fs_format = FLAGS.default_ephemeral_format
+            (out, err) = utils.execute('mkfs', '-t', fs_format, '-F', '-L', 'ephemeral0', '/dev/%s/%s' % (self.vg, self.lv),
+                                       run_as_root=True,
+                                       check_exit_code=0)
         else:
             prepare_template(target=base, *args, **kwargs)
             with self.remove_volume_on_error(self.path):
diff --git a/nova/virt/libvirt/utils.py b/nova/virt/libvirt/utils.py
index 82dc956..957487e 100644
--- a/nova/virt/libvirt/utils.py
+++ b/nova/virt/libvirt/utils.py
@@ -180,9 +180,10 @@ def clear_logical_volume(path):
     while remaining_bytes:
         zero_blocks = remaining_bytes / bs
         seek_blocks = (vol_size - remaining_bytes) / bs
+        # GDC: Clean one block only, we do not need more security (it is Private cloud)
         zero_cmd = ('dd', 'bs=%s' % bs,
                     'if=/dev/zero', 'of=%s' % path,
-                    'seek=%s' % seek_blocks, 'count=%s' % zero_blocks)
+                    'seek=%s' % seek_blocks, 'count=1')
         if zero_blocks:
             utils.execute(*zero_cmd, run_as_root=True)
         remaining_bytes %= bs
@@ -300,7 +301,7 @@ def mkfs(fs, path, label=None):
         if fs in ['ext3', 'ext4']:
             args.extend(['-F'])
         if label:
-            args.extend(['-n', label])
+            args.extend(['-L', label])
         args.append(path)
         execute(*args)
 
