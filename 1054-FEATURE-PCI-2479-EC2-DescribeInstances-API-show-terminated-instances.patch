From e1cc9d3576edcc8f8930aef1182f0814603db6e0 Mon Sep 17 00:00:00 2001
From: Jaroslav Pulchart <jaroslav.pulchart@gooddata.com>
Date: Tue, 8 Oct 2013 19:15:10 +0200
Subject: [PATCH] FEATURE: PCI-2479 Extend EC2 DescribeInstances API to show
 terminated instances

---
 nova/api/ec2/cloud.py     | 41 +++++++++++++++++++++++++++--------------
 nova/db/sqlalchemy/api.py | 13 +++++++++++++
 2 files changed, 40 insertions(+), 14 deletions(-)

diff --git a/nova/api/ec2/cloud.py b/nova/api/ec2/cloud.py
index 550de71..024567e 100644
--- a/nova/api/ec2/cloud.py
+++ b/nova/api/ec2/cloud.py
@@ -25,6 +25,7 @@ datastore.
 import base64
 import time
 import functools
+import datetime
 
 from nova.api.ec2 import ec2utils
 from nova.api.ec2 import inst_state
@@ -1069,6 +1070,11 @@ class CloudController(object):
         #               rather than simply formatting a bunch of instances that
         #               were handed to it
         reservations = {}
+
+        # always filter out older instances
+        ts = timeutils.utcnow() - datetime.timedelta(minutes=60)
+        search_opts['terminated-since'] = ts
+
         # NOTE(vish): instance_id is an optional list of ids to filter by
         if instance_id:
             instances = []
@@ -1076,14 +1082,19 @@ class CloudController(object):
                 try:
                     instance_uuid = ec2utils.ec2_inst_id_to_uuid(context,
                                                                  ec2_id)
-                    instance = self.compute_api.get(context, instance_uuid)
+                    search_opts['instance-uuid'] = instance_uuid
+                    instance = self.compute_api.get_all(context,
+                                                        search_opts=search_opts,
+                                                        sort_dir='asc')
                 except exception.NotFound:
                     continue
-                instances.append(instance)
+
+                try:
+                    instances.append(instance[0])
+                except:
+                    continue
         else:
             try:
-                # always filter out deleted instances
-                search_opts['deleted'] = False
                 instances = self.compute_api.get_all(context,
                                                      search_opts=search_opts,
                                                      sort_dir='asc')
@@ -1106,13 +1117,14 @@ class CloudController(object):
 
             fixed_ip = None
             floating_ip = None
-            ip_info = ec2utils.get_ip_info_for_instance(context, instance)
-            if ip_info['fixed_ips']:
-                fixed_ip = ip_info['fixed_ips'][0]
-            if ip_info['floating_ips']:
-                floating_ip = ip_info['floating_ips'][0]
-            if ip_info['fixed_ip6s']:
-                i['dnsNameV6'] = ip_info['fixed_ip6s'][0]
+            if instance['deleted'] != True:
+                ip_info = ec2utils.get_ip_info_for_instance(context, instance)
+                if ip_info['fixed_ips']:
+                    fixed_ip = ip_info['fixed_ips'][0]
+                if ip_info['floating_ips']:
+                    floating_ip = ip_info['floating_ips'][0]
+                if ip_info['fixed_ip6s']:
+                    i['dnsNameV6'] = ip_info['fixed_ip6s'][0]
             if FLAGS.ec2_private_dns_show_ip:
                 i['privateDnsName'] = fixed_ip
             else:
@@ -1134,9 +1146,10 @@ class CloudController(object):
             self._format_instance_type(instance, i)
             i['launchTime'] = instance['created_at']
             i['amiLaunchIndex'] = instance['launch_index']
-            self._format_instance_root_device_name(instance, i)
-            self._format_instance_bdm(context, instance['uuid'],
-                                      i['rootDeviceName'], i)
+            if instance['deleted'] != True:
+                self._format_instance_root_device_name(instance, i)
+                self._format_instance_bdm(context, instance['uuid'],
+                                          i['rootDeviceName'], i)
             host = instance['host']
             services = db.service_get_all_by_host(context.elevated(), host)
             zone = ec2utils.get_availability_zone_by_host(services, host)
diff --git a/nova/db/sqlalchemy/api.py b/nova/db/sqlalchemy/api.py
index 43eb95c..81bb1eb 100644
--- a/nova/db/sqlalchemy/api.py
+++ b/nova/db/sqlalchemy/api.py
@@ -1591,6 +1591,19 @@ def instance_get_all_by_filters(context, filters, sort_key, sort_dir,
         query_prefix = query_prefix.\
                             filter(models.Instance.updated_at > changes_since)
 
+
+    if 'terminated-since' in filters:
+        terminated_since = timeutils.normalize_time(filters['terminated-since'])
+        filter = or_(and_(models.Instance.deleted_at >= terminated_since,
+                          models.Instance.vm_state == "deleted"),
+                     and_(models.Instance.deleted_at == None,
+                          models.Instance.deleted == False))
+        if 'instance-uuid' in filters:
+            instance_uuid = filters['instance-uuid']
+            filter = and_(filter,
+                          models.Instance.uuid == instance_uuid)
+        query_prefix = query_prefix.filter(filter)
+
     if 'deleted' in filters:
         # Instances can be soft or hard deleted and the query needs to
         # include or exclude both
-- 
1.8.3.1

