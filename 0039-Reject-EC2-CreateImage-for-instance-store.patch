From efc454dbb6a422e36da081827b4f566a4ee05854 Mon Sep 17 00:00:00 2001
From: Eoghan Glynn <eglynn@redhat.com>
Date: Tue, 17 Jul 2012 15:20:30 +0100
Subject: [PATCH] Reject EC2 CreateImage for instance-store

For fidelity with AWS, we explicitly do not support the EC2 CreateImage
API for the analogue of instance-store-backed instances.

Change-Id: I266a021ce53dbb1f521201f1cdc614b08c31bf8d
---
 nova/api/ec2/cloud.py            |   13 ++++++++-
 nova/compute/api.py              |   14 ++++++++++
 nova/tests/api/ec2/test_cloud.py |   52 +++++++++++++++++++++++++++++++++++---
 3 files changed, 73 insertions(+), 6 deletions(-)

diff --git a/nova/api/ec2/cloud.py b/nova/api/ec2/cloud.py
index 7172954..e9bf1b2 100644
--- a/nova/api/ec2/cloud.py
+++ b/nova/api/ec2/cloud.py
@@ -1599,6 +1599,17 @@ class CloudController(object):
         instance_id = ec2utils.ec2_id_to_id(ec2_instance_id)
         instance = self.compute_api.get(context, instance_id)
 
+        bdms = self.compute_api.get_instance_bdms(context, instance)
+
+        # CreateImage only supported for the analogue of EBS-backed instances
+        if not self.compute_api.is_volume_backed_instance(context, instance,
+                                                          bdms):
+            root = instance['root_device_name']
+            msg = _("Invalid value '%(ec2_instance_id)s' for instanceId. "
+                    "Instance does not have a volume attached at root "
+                    "(%(root)s)") % locals()
+            raise exception.InvalidParameterValue(err=msg)
+
         # stop the instance if necessary
         restart_instance = False
         if not no_reboot:
@@ -1641,8 +1652,6 @@ class CloudController(object):
                              _('image of %(instance)s at %(now)s') % name_map)
 
         mapping = []
-        bdms = db.block_device_mapping_get_all_by_instance(context,
-                                                           instance['uuid'])
         for bdm in bdms:
             if bdm.no_device:
                 continue
diff --git a/nova/compute/api.py b/nova/compute/api.py
index 48f3d47..d756885 100644
--- a/nova/compute/api.py
+++ b/nova/compute/api.py
@@ -1685,6 +1685,20 @@ class API(BaseAPI):
         uuids = [instance['uuid'] for instance in instances]
         return self.db.instance_fault_get_by_instance_uuids(context, uuids)
 
+    def get_instance_bdms(self, context, instance):
+        """Get all bdm tables for specified instance."""
+        return self.db.block_device_mapping_get_all_by_instance(context,
+                instance['uuid'])
+
+    def is_volume_backed_instance(self, context, instance, bdms):
+        bdms = bdms or self.get_instance_bdms(context, instance)
+        for bdm in bdms:
+            if (block_device.strip_dev(bdm.device_name) ==
+                block_device.strip_dev(instance['root_device_name'])):
+                return True
+        else:
+            return False
+
 
 class HostAPI(BaseAPI):
     """Sub-set of the Compute Manager API for managing host operations."""
diff --git a/nova/tests/api/ec2/test_cloud.py b/nova/tests/api/ec2/test_cloud.py
index d8da26d..d4109e4 100644
--- a/nova/tests/api/ec2/test_cloud.py
+++ b/nova/tests/api/ec2/test_cloud.py
@@ -2067,11 +2067,11 @@ class CloudTestCase(test.TestCase):
         def fake_show(meh, context, id):
             bdm = [dict(snapshot_id=snapshots[0],
                         volume_size=1,
-                        device_name='vda',
+                        device_name='sda1',
                         delete_on_termination=False)]
             props = dict(kernel_id='cedef40a-ed67-4d10-800e-17455edce175',
                          ramdisk_id='76fa36fc-c930-4bf3-8c8a-ea2a2420deb6',
-                         root_device_name='/dev/vda',
+                         root_device_name='/dev/sda1',
                          block_device_mapping=bdm)
             return dict(id=id,
                         properties=props,
@@ -2089,7 +2089,7 @@ class CloudTestCase(test.TestCase):
                                        volume_id=volumes[0],
                                        virtual_name=None,
                                        volume_size=1,
-                                       device_name='vda',
+                                       device_name='sda1',
                                        delete_on_termination=False)
 
                 def __getattr__(self, name):
@@ -2111,7 +2111,7 @@ class CloudTestCase(test.TestCase):
 
         self.assertTrue('blockDeviceMapping' in created_image)
         bdm = created_image['blockDeviceMapping'][0]
-        self.assertEquals(bdm.get('deviceName'), 'vda')
+        self.assertEquals(bdm.get('deviceName'), 'sda1')
         self.assertTrue('ebs' in bdm)
         self.assertEquals(bdm['ebs'].get('snapshotId'),
                           'snap-%08x' % snapshots[0])
@@ -2128,6 +2128,50 @@ class CloudTestCase(test.TestCase):
 
         self._restart_compute_service()
 
+    def test_create_image_instance_store(self):
+        """
+        Ensure CreateImage fails as expected for an instance-store-backed
+        instance
+        """
+        # enforce periodic tasks run in short time to avoid wait for 60s.
+        self._restart_compute_service(periodic_interval=0.3)
+
+        (volumes, snapshots) = self._setUpImageSet(
+            create_volumes_and_snapshots=True)
+
+        kwargs = {'image_id': 'ami-1',
+                  'instance_type': FLAGS.default_instance_type,
+                  'max_count': 1}
+        ec2_instance_id = self._run_instance(**kwargs)
+
+        def fake_block_device_mapping_get_all_by_instance(context, inst_id):
+            class BDM(object):
+                def __init__(self):
+                    self.no_device = None
+                    self.values = dict(snapshot_id=snapshots[0],
+                                       volume_id=volumes[0],
+                                       virtual_name=None,
+                                       volume_size=1,
+                                       device_name='vda',
+                                       delete_on_termination=False)
+
+                def __getattr__(self, name):
+                    return self.values.get(name)
+
+                def __getitem__(self, key):
+                    return self.values.get(key)
+
+            return [BDM()]
+
+        self.stubs.Set(db, 'block_device_mapping_get_all_by_instance',
+                       fake_block_device_mapping_get_all_by_instance)
+
+        self.assertRaises(exception.InvalidParameterValue,
+                          self.cloud.create_image,
+                          self.context,
+                          ec2_instance_id,
+                          no_reboot=True)
+
     @staticmethod
     def _fake_bdm_get(ctxt, id):
             return [{'volume_id': 87654321,
