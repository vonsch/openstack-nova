From f6939d8b1169cd1c930bfcfcaa2d71e7da7432dc Mon Sep 17 00:00:00 2001
From: Yury Tsarev <yury.tsarev@gooddata.com>
Date: Fri, 2 May 2014 16:04:31 +0200
Subject: [PATCH] FEATURE: PCI-3773 aio=native and virtio-blk-dataplane
 enablement

This commit introduces following configuration options to nova.conf

* libvirt_dataplane = (True|False)
* libvirt_io_native = (True|False)

and related functionality.

All changes are backed by tests.
---
 nova/tests/test_libvirt_config.py | 150 ++++++++++++++++++++++++++++++++++++++
 nova/virt/libvirt/config.py       |  28 +++++++
 nova/virt/libvirt/driver.py       |   9 +++
 3 files changed, 187 insertions(+)

diff --git a/nova/tests/test_libvirt_config.py b/nova/tests/test_libvirt_config.py
index cc8050c..6c0999a 100644
--- a/nova/tests/test_libvirt_config.py
+++ b/nova/tests/test_libvirt_config.py
@@ -21,6 +21,10 @@ from nova import test
 
 from nova.virt.libvirt import config
 
+from nova import flags
+
+FLAGS = flags.FLAGS
+
 
 class LibvirtConfigBaseTest(test.TestCase):
     def assertXmlEqual(self, expectedXmlstr, actualXmlstr):
@@ -395,6 +399,94 @@ class LibvirtConfigGuestDiskTest(LibvirtConfigBaseTest):
               <target bus="virtio" dev="/dev/vda"/>
             </disk>""")
 
+    def test_io_native(self):
+        FLAGS.libvirt_io_native = True
+        FLAGS.libvirt_dataplane = False
+        FLAGS.libvirt_images_type = "lvm"
+        obj = config.LibvirtConfigGuestDisk()
+        obj.source_type = "block"
+        obj.source_device = "disk"
+        obj.source_path = "/dev/nova-volumes/test-io-native"
+        obj.target_dev = "/dev/vda"
+        obj.target_bus = "virtio"
+        obj.driver_name = "qemu"
+        obj.driver_format = "raw"
+        obj.driver_cache = "none"
+
+        xml = obj.to_xml()
+        self.assertXmlEqual(xml, """
+            <disk type="block" device="disk">
+              <driver name='qemu' type='raw' cache='none' io='native'/>
+              <source dev="/dev/nova-volumes/test-io-native"/>
+              <target bus="virtio" dev="/dev/vda"/>
+            </disk>""")
+
+    def test_io_native_through_dataplane(self):
+        FLAGS.libvirt_io_native = False
+        FLAGS.libvirt_dataplane = True
+        FLAGS.libvirt_images_type = "lvm"
+        obj = config.LibvirtConfigGuestDisk()
+        obj.source_type = "block"
+        obj.source_device = "disk"
+        obj.source_path = "/dev/nova-volumes/test-io-native"
+        obj.target_dev = "/dev/vda"
+        obj.target_bus = "virtio"
+        obj.driver_name = "qemu"
+        obj.driver_format = "raw"
+        obj.driver_cache = "none"
+
+        xml = obj.to_xml()
+        self.assertXmlEqual(xml, """
+            <disk type="block" device="disk">
+              <driver name='qemu' type='raw' cache='none' io='native'/>
+              <source dev="/dev/nova-volumes/test-io-native"/>
+              <target bus="virtio" dev="/dev/vda"/>
+            </disk>""")
+
+    def test_io_native_disabled(self):
+        FLAGS.libvirt_io_native = False
+        FLAGS.libvirt_dataplane = False
+        FLAGS.libvirt_images_type = "lvm"
+        obj = config.LibvirtConfigGuestDisk()
+        obj.source_type = "block"
+        obj.source_device = "disk"
+        obj.source_path = "/dev/nova-volumes/test-io-native"
+        obj.target_dev = "/dev/vda"
+        obj.target_bus = "virtio"
+        obj.driver_name = "qemu"
+        obj.driver_format = "raw"
+        obj.driver_cache = "none"
+
+        xml = obj.to_xml()
+        self.assertXmlEqual(xml, """
+            <disk type="block" device="disk">
+              <driver name='qemu' type='raw' cache='none'/>
+              <source dev="/dev/nova-volumes/test-io-native"/>
+              <target bus="virtio" dev="/dev/vda"/>
+            </disk>""")
+
+    def test_io_native_disabled_no_lvm(self):
+        FLAGS.libvirt_io_native = True
+        FLAGS.libvirt_dataplane = False
+        FLAGS.libvirt_images_type = "raw"
+        obj = config.LibvirtConfigGuestDisk()
+        obj.source_type = "block"
+        obj.source_device = "disk"
+        obj.source_path = "/dev/nova-volumes/test-io-native"
+        obj.target_dev = "/dev/vda"
+        obj.target_bus = "virtio"
+        obj.driver_name = "qemu"
+        obj.driver_format = "raw"
+        obj.driver_cache = "none"
+
+        xml = obj.to_xml()
+        self.assertXmlEqual(xml, """
+            <disk type="block" device="disk">
+              <driver name='qemu' type='raw' cache='none'/>
+              <source dev="/dev/nova-volumes/test-io-native"/>
+              <target bus="virtio" dev="/dev/vda"/>
+            </disk>""")
+
 
 class LibvirtConfigGuestFilesysTest(LibvirtConfigBaseTest):
 
@@ -709,6 +801,64 @@ class LibvirtConfigGuestTest(LibvirtConfigBaseTest):
               </devices>
             </domain>""")
 
+    def test_config_kvm_dataplane(self):
+        FLAGS.libvirt_dataplane = True
+        FLAGS.libvirt_images_type = "lvm"
+        obj = config.LibvirtConfigGuest()
+        obj.virt_type = "kvm"
+        obj.memory = 1024 * 1024 * 100
+        obj.vcpus = 2
+        obj.name = "demo"
+        obj.uuid = "b38a3f43-4be2-4046-897f-b67c2f5e0147"
+        obj.os_type = "linux"
+        obj.os_boot_dev = "hd"
+        obj.acpi = True
+        obj.apic = True
+        obj.pae = True
+        obj.dataplane = True
+
+        disk = config.LibvirtConfigGuestDisk()
+        disk.source_type = "block"
+        disk.source_path = "/dev/nova-volumes/test-dataplane"
+        disk.target_dev = "/dev/vda"
+        disk.target_bus = "virtio"
+        disk.driver_name = "qemu"
+        disk.driver_format = "raw"
+        disk.driver_cache = "none"
+
+        obj.add_device(disk)
+
+        xml = obj.to_xml()
+        self.assertXmlEqual(xml, """
+            <domain type="kvm">
+              <uuid>b38a3f43-4be2-4046-897f-b67c2f5e0147</uuid>
+              <name>demo</name>
+              <memory>104857600</memory>
+              <vcpu>2</vcpu>
+              <os>
+                <type>linux</type>
+                <boot dev="hd"/>
+              </os>
+              <features>
+                <acpi/>
+                <apic/>
+                <pae/>
+              </features>
+              <devices>
+                <disk type="block" device="disk">
+                  <driver name='qemu' type='raw' cache='none' io='native'/>
+                  <source dev="/dev/nova-volumes/test-dataplane"/>
+                  <target bus="virtio" dev="/dev/vda"/>
+                </disk>
+              </devices>
+            <qemu:commandline xmlns:qemu="http://libvirt.org/schemas/domain/qemu/1.0">
+               <qemu:arg value="-global"/>
+               <qemu:arg value="virtio-blk-pci.scsi=off"/>
+               <qemu:arg value="-global"/>
+               <qemu:arg value="virtio-blk-pci.x-data-plane=on"/>
+            </qemu:commandline>
+            </domain>""")
+
 
 class LibvirtConfigGuestSnapshotTest(LibvirtConfigBaseTest):
 
diff --git a/nova/virt/libvirt/config.py b/nova/virt/libvirt/config.py
index a8518a5..f2af2e4 100644
--- a/nova/virt/libvirt/config.py
+++ b/nova/virt/libvirt/config.py
@@ -23,12 +23,14 @@ and support conversion to/from XML
 
 from nova import exception
 from nova.openstack.common import log as logging
+from nova import flags
 
 from lxml import etree
 
 
 LOG = logging.getLogger(__name__)
 
+FLAGS = flags.FLAGS
 
 class LibvirtConfigObject(object):
 
@@ -354,6 +356,14 @@ class LibvirtConfigGuestDisk(LibvirtConfigGuestDevice):
         self.driver_name = None
         self.driver_format = None
         self.driver_cache = None
+        if (FLAGS.libvirt_dataplane or FLAGS.libvirt_io_native):
+            if FLAGS.libvirt_images_type == "lvm":
+                self.driver_io = "native"
+            else:
+                self.driver_io = None
+                LOG.warn('Native io can be enabled only for lvm image type')
+        else:
+            self.driver_io = None
         self.source_path = None
         self.source_protocol = None
         self.source_host = None
@@ -380,6 +390,8 @@ class LibvirtConfigGuestDisk(LibvirtConfigGuestDevice):
                 drv.set("type", self.driver_format)
             if self.driver_cache is not None:
                 drv.set("cache", self.driver_cache)
+            if self.driver_io is not None:
+                drv.set("io", self.driver_io)
             dev.append(drv)
 
         if self.source_type == "file":
@@ -585,6 +597,7 @@ class LibvirtConfigGuest(LibvirtConfigObject):
         self.vcpus = 1
         self.cpu = None
         self.hugepages = False
+        self.dataplane = False
         self.acpi = False
         self.apic = False
         self.pae = False
@@ -630,6 +643,19 @@ class LibvirtConfigGuest(LibvirtConfigObject):
             memorybacking.append(etree.Element("hugepages"))
             root.append(memorybacking)
 
+    def _format_dataplane(self, root):
+        if self.dataplane:
+            XML_NAMESPACE = "http://libvirt.org/schemas/domain/qemu/1.0"
+            XML = "{%s}" % XML_NAMESPACE
+            NSMAP = {"qemu": XML_NAMESPACE}
+            qemu_cl = etree.Element(XML + "commandline", nsmap=NSMAP)
+            qemu_opts = ["-global", "virtio-blk-pci.scsi=off",
+                         "-global", "virtio-blk-pci.x-data-plane=on"]
+            for option in qemu_opts:
+                qemu_arg = etree.SubElement(qemu_cl, XML + "arg")
+                qemu_arg.set("value", option)
+            root.append(qemu_cl)
+
     def _format_features(self, root):
         if self.acpi or self.apic or self.pae:
             features = etree.Element("features")
@@ -667,6 +693,8 @@ class LibvirtConfigGuest(LibvirtConfigObject):
 
         self._format_devices(root)
 
+        self._format_dataplane(root)
+
         return root
 
     def add_device(self, dev):
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index 8ada675..af21fd0 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -103,6 +103,12 @@ libvirt_opts = [
     cfg.BoolOpt('libvirt_hugepages',
                default=False,
                help='Libvirt hugepages memory backed'),
+    cfg.BoolOpt('libvirt_dataplane',
+                default=False,
+                help='Enable x-data-plane for virtio devices'),
+    cfg.BoolOpt('libvirt_io_native',
+                default=False,
+                help='Enable native io'),
     cfg.StrOpt('libvirt_uri',
                default='',
                help='Override the default libvirt URI '
@@ -1840,6 +1846,9 @@ class LibvirtDriver(driver.ComputeDriver):
         if FLAGS.libvirt_hugepages == True:
             guest.hugepages = True
 
+        if FLAGS.libvirt_dataplane:
+            guest.dataplane = True
+
         clk = config.LibvirtConfigGuestClock()
         clk.offset = "utc"
         guest.set_clock(clk)
-- 
1.9.0

