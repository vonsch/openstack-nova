From 0b9cb532ea4d73f2f6b8244fccfd0cdbf5bd4eb7 Mon Sep 17 00:00:00 2001
From: Tomas Dubec <tomas.dubec@gooddata.com>
Date: Tue, 4 Feb 2014 14:29:03 +0100
Subject: [PATCH] BUGFIX: PCI-3231 speed up get_floating_ips nova API call via
 updating SQL and thus making hundreds of RPCs and SQLs unnecessary

---
 nova/api/openstack/compute/contrib/floating_ips.py | 11 +++++++++++
 nova/db/sqlalchemy/api.py                          | 20 +++++++++++++++++---
 2 files changed, 28 insertions(+), 3 deletions(-)

diff --git a/nova/api/openstack/compute/contrib/floating_ips.py b/nova/api/openstack/compute/contrib/floating_ips.py
index 1ac9708..49c7fe4 100644
--- a/nova/api/openstack/compute/contrib/floating_ips.py
+++ b/nova/api/openstack/compute/contrib/floating_ips.py
@@ -154,6 +154,9 @@ class FloatingIPController(object):
 
         return _translate_floating_ip_view(floating_ip)
 
+    # tweaked by TDU - PCI-3231
+    # I'm not particularly proud of this one, but it gets the job done
+    # in reasonable time and without hundreds separate SQL queries..
     @wsgi.serializers(xml=FloatingIPsTemplate)
     def index(self, req):
         """Return a list of floating ips allocated to a project."""
@@ -162,7 +165,15 @@ class FloatingIPController(object):
 
         floating_ips = self.network_api.get_floating_ips_by_project(context)
 
+        search_opts = {}
+        search_opts['project_id'] = context.project_id
+        all_instances = self.compute_api.get_all(context, search_opts)
+
         for floating_ip in floating_ips:
+            for instance in all_instances:
+                if instance['uuid'] == floating_ip['fixed_ip']['instance_uuid']:
+                    floating_ip['instance'] = instance
+                    break
             self._set_metadata(context, floating_ip)
 
         return _translate_floating_ips_view(floating_ips)
diff --git a/nova/db/sqlalchemy/api.py b/nova/db/sqlalchemy/api.py
index cc33ccb..543d67c 100644
--- a/nova/db/sqlalchemy/api.py
+++ b/nova/db/sqlalchemy/api.py
@@ -900,12 +900,26 @@ def floating_ip_get_all_by_host(context, host):
     return floating_ip_refs
 
 
+# tweaked by TDU - PCI-3231
+# include fixed IP and instance UUID directly in this response
+# (and do some fugly hacking to workaround broken model)
 @require_context
 def floating_ip_get_all_by_project(context, project_id):
     authorize_project_context(context, project_id)
-    return _floating_ip_get_all(context).\
-                         filter_by(project_id=project_id).\
-                         all()
+    fl_ip_list = _floating_ip_get_all(context).\
+                    filter_by(project_id=project_id).\
+                    join(models.FixedIp, models.FixedIp.id==models.FloatingIp.fixed_ip_id).\
+                    add_column(models.FixedIp.instance_uuid.label("floating_ips_instance_uuid")).\
+                    add_column(models.FixedIp.address.label("floating_ips_fixed_ip")).\
+                    all()
+
+    ret = []
+    for fl_ip in fl_ip_list:
+        tmp = fl_ip[0]
+        tmp['fixed_ip'] = { 'address': fl_ip[2], 'instance_uuid': fl_ip[1] }
+        ret.append(tmp)
+
+    return ret
 
 
 @require_context
-- 
1.8.5.3

