From 4c7d671d21816f656068380e3b7a1415d98ba69c Mon Sep 17 00:00:00 2001
From: Soren Hansen <sorhanse@cisco.com>
Date: Wed, 23 May 2012 13:36:37 -0500
Subject: [PATCH] Conditionally allow queries for deleted flavours

Fixes bug #994935

This is four commits from upstream squashed into one:

   31506c0 Permit deleted instance types to be queried for active
           instances. (By Josh Kearney)
   f6e62c6 API users should not see deleted flavors. (By Dan Prince)
   16d26af Revert "API users should not see deleted flavors." (By Josh
           Kearney)
   5157401 Do not always query deleted instance_types. (By Brian Lamar)

It may seem strange to include both the change and the reversion of the
change, but a) this is the most accurate way to reflect the history of
the changes and b) the reversion actually includes new tests.

Change-Id: Id231e9518ac176e29cc6241fff81705910dc9e9e
---
 nova/api/openstack/compute/servers.py |    2 +-
 nova/compute/instance_types.py        |    4 +-
 nova/db/sqlalchemy/models.py          |    3 +-
 nova/tests/test_instance_types.py     |   51 ++++++++++++++++++++++++++++++++-
 4 files changed, 54 insertions(+), 6 deletions(-)

diff --git a/nova/api/openstack/compute/servers.py b/nova/api/openstack/compute/servers.py
index 8ca49b6..f23a2a3 100644
--- a/nova/api/openstack/compute/servers.py
+++ b/nova/api/openstack/compute/servers.py
@@ -704,7 +704,7 @@ class Controller(wsgi.Controller):
 
         try:
             _get_inst_type = instance_types.get_instance_type_by_flavor_id
-            inst_type = _get_inst_type(flavor_id)
+            inst_type = _get_inst_type(flavor_id, read_deleted="no")
 
             (instances, resv_id) = self.compute_api.create(context,
                             inst_type,
diff --git a/nova/compute/instance_types.py b/nova/compute/instance_types.py
index 2bc470a..aa42dd7 100644
--- a/nova/compute/instance_types.py
+++ b/nova/compute/instance_types.py
@@ -129,10 +129,10 @@ def get_instance_type_by_name(name):
 
 # TODO(termie): flavor-specific code should probably be in the API that uses
 #               flavors.
-def get_instance_type_by_flavor_id(flavorid):
+def get_instance_type_by_flavor_id(flavorid, read_deleted="yes"):
     """Retrieve instance type by flavorid.
 
     :raises: FlavorNotFound
     """
-    ctxt = context.get_admin_context()
+    ctxt = context.get_admin_context(read_deleted=read_deleted)
     return db.instance_type_get_by_flavor_id(ctxt, flavorid)
diff --git a/nova/db/sqlalchemy/models.py b/nova/db/sqlalchemy/models.py
index ec5e663..101ca84 100644
--- a/nova/db/sqlalchemy/models.py
+++ b/nova/db/sqlalchemy/models.py
@@ -328,8 +328,7 @@ class InstanceTypes(BASE, NovaBase):
                            foreign_keys=id,
                            primaryjoin='and_('
                                'Instance.instance_type_id == '
-                               'InstanceTypes.id, '
-                               'InstanceTypes.deleted == False)')
+                               'InstanceTypes.id)')
 
 
 class Volume(BASE, NovaBase):
diff --git a/nova/tests/test_instance_types.py b/nova/tests/test_instance_types.py
index 9057f18..68519a2 100644
--- a/nova/tests/test_instance_types.py
+++ b/nova/tests/test_instance_types.py
@@ -145,7 +145,7 @@ class InstanceTypeTestCase(test.TestCase):
                           'name two', 256, 1, 120, 200, flavorid)
 
     def test_will_not_destroy_with_no_name(self):
-        """Ensure destroy sad path of no name raises error"""
+        """Ensure destroy said path of no name raises error"""
         self.assertRaises(exception.InstanceTypeNotFoundByName,
                           instance_types.destroy, None)
 
@@ -194,6 +194,55 @@ class InstanceTypeTestCase(test.TestCase):
         fetched = instance_types.get_instance_type_by_flavor_id(flavorid)
         self.assertEqual(default_instance_type, fetched)
 
+    def test_can_read_deleted_types_using_flavor_id(self):
+        """Ensure deleted instance types can be read when querying flavor_id"""
+        inst_type_name = "test"
+        inst_type_flavor_id = "test1"
+
+        inst_type = instance_types.create(inst_type_name, 256, 1, 120, 100,
+                inst_type_flavor_id)
+        self.assertEqual(inst_type_name, inst_type["name"])
+
+        # NOTE(jk0): The deleted flavor will show up here because the context
+        # in get_instance_type_by_flavor_id() is set to use read_deleted by
+        # default.
+        instance_types.destroy(inst_type["name"])
+        deleted_inst_type = instance_types.get_instance_type_by_flavor_id(
+                inst_type_flavor_id)
+        self.assertEqual(inst_type_name, deleted_inst_type["name"])
+
+    def test_read_deleted_false_converting_flavorid(self):
+        """
+        Ensure deleted instance types are not returned when not needed (for
+        example when creating a server and attempting to translate from
+        flavorid to instance_type_id.
+        """
+        instance_types.create("instance_type1", 256, 1, 120, 100, "test1")
+        instance_types.destroy("instance_type1")
+        instance_types.create("instance_type1_redo", 256, 1, 120, 100, "test1")
+
+        instance_type = instance_types.get_instance_type_by_flavor_id(
+                "test1", read_deleted="no")
+        self.assertEqual("instance_type1_redo", instance_type["name"])
+
+    def test_will_list_deleted_type_for_active_instance(self):
+        """Ensure deleted instance types with active instances can be read"""
+        ctxt = context.get_admin_context()
+        inst_type = instance_types.create("test", 256, 1, 120, 100, "test1")
+
+        instance_params = {"instance_type_id": inst_type["id"]}
+        instance = db.instance_create(ctxt, instance_params)
+
+        # NOTE(jk0): Delete the instance type and reload the instance from the
+        # DB. The instance_type object will still be available to the active
+        # instance, otherwise being None.
+        instance_types.destroy(inst_type["name"])
+        instance = db.instance_get_by_uuid(ctxt, instance["uuid"])
+
+        self.assertRaises(exception.InstanceTypeNotFound,
+                instance_types.get_instance_type, inst_type["name"])
+        self.assertTrue(instance["instance_type"])
+
 
 class InstanceTypeFilteringTest(test.TestCase):
     """Test cases for the filter option available for instance_type_get_all"""
