From 885c385b63ef2ac9813f6a40dc1d885cc010ed88 Mon Sep 17 00:00:00 2001
From: Eoghan Glynn <eglynn@redhat.com>
Date: Tue, 17 Jul 2012 18:18:07 +0100
Subject: [PATCH] Fix EC2 CreateImage no_reboot logic

Previously the call to restart the imaged instance was incorrect.

This is now fixed and unit tested.

Change-Id: Ifde193e084ecdbc37a57150f28d833ae276f49c6
---
 nova/api/ec2/cloud.py            |    2 +-
 nova/tests/api/ec2/test_cloud.py |   27 +++++++++++++++++++++++++--
 2 files changed, 26 insertions(+), 3 deletions(-)

diff --git a/nova/api/ec2/cloud.py b/nova/api/ec2/cloud.py
index e9bf1b2..88b8861 100644
--- a/nova/api/ec2/cloud.py
+++ b/nova/api/ec2/cloud.py
@@ -1721,6 +1721,6 @@ class CloudController(object):
         ec2_id = ec2utils.glance_id_to_ec2_id(context, new_image['id'])
 
         if restart_instance:
-            self.compute_api.start(context, instance_id=instance_id)
+            self.compute_api.start(context, instance)
 
         return {'imageId': ec2_id}
diff --git a/nova/tests/api/ec2/test_cloud.py b/nova/tests/api/ec2/test_cloud.py
index d4109e4..cd3c7a3 100644
--- a/nova/tests/api/ec2/test_cloud.py
+++ b/nova/tests/api/ec2/test_cloud.py
@@ -40,6 +40,7 @@ from nova import log as logging
 from nova import rpc
 from nova import test
 from nova import utils
+from nova.virt import driver
 
 
 LOG = logging.getLogger(__name__)
@@ -2051,7 +2052,7 @@ class CloudTestCase(test.TestCase):
 
         db.volume_destroy(self.context, vol['id'])
 
-    def test_create_image(self):
+    def _do_test_create_image(self, no_reboot):
         """Make sure that CreateImage works"""
         # enforce periodic tasks run in short time to avoid wait for 60s.
         self._restart_compute_service(periodic_interval=0.3)
@@ -2103,8 +2104,20 @@ class CloudTestCase(test.TestCase):
         self.stubs.Set(db, 'block_device_mapping_get_all_by_instance',
                        fake_block_device_mapping_get_all_by_instance)
 
+        virt_driver = {}
+
+        def fake_power_on(self, instance):
+            virt_driver['powered_on'] = True
+
+        self.stubs.Set(driver.ComputeDriver, 'power_on', fake_power_on)
+
+        def fake_power_off(self, instance):
+            virt_driver['powered_off'] = True
+
+        self.stubs.Set(driver.ComputeDriver, 'power_off', fake_power_off)
+
         result = self.cloud.create_image(self.context, ec2_instance_id,
-                                         no_reboot=True)
+                                         no_reboot=no_reboot)
         ec2_ids = [result['imageId']]
         created_image = self.cloud.describe_images(self.context,
                                                    ec2_ids)['imagesSet'][0]
@@ -2118,6 +2131,8 @@ class CloudTestCase(test.TestCase):
         self.assertEquals(created_image.get('kernelId'), 'aki-00000001')
         self.assertEquals(created_image.get('ramdiskId'), 'ari-00000002')
         self.assertEquals(created_image.get('rootDeviceType'), 'ebs')
+        self.assertNotEqual(virt_driver.get('powered_on'), no_reboot)
+        self.assertNotEqual(virt_driver.get('powered_off'), no_reboot)
 
         self.cloud.terminate_instances(self.context, [ec2_instance_id])
         for vol in volumes:
@@ -2128,6 +2143,14 @@ class CloudTestCase(test.TestCase):
 
         self._restart_compute_service()
 
+    def test_create_image_no_reboot(self):
+        """Make sure that CreateImage works"""
+        self._do_test_create_image(True)
+
+    def test_create_image_with_reboot(self):
+        """Make sure that CreateImage works"""
+        self._do_test_create_image(False)
+
     def test_create_image_instance_store(self):
         """
         Ensure CreateImage fails as expected for an instance-store-backed
