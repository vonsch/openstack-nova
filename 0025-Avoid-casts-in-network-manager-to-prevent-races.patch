From 80d302670f8db37b297ea0618cc14851aab6fff5 Mon Sep 17 00:00:00 2001
From: Vishvananda Ishaya <vishvananda@gmail.com>
Date: Tue, 26 Jun 2012 17:56:21 -0700
Subject: [PATCH] Avoid casts in network manager to prevent races

 * Fixes bug 1017418
 * Includes a change to turn the floating ip casts
   into calls which is part of commit
   82599c77346bbefd550ea4ee6c0b13a3df4950af
 * These calls are to prevent race conditions that
   were preventing floating ips from being deallocated
   properly

Change-Id: I3251f02fc5fcb8305f12b6b8a9644232b9146db2
(cherry picked from commit c689891226baa8877f6fb7b3c468b06972068847)
---
 nova/network/manager.py            |    8 ++++----
 nova/tests/network/test_manager.py |    4 ++--
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/nova/network/manager.py b/nova/network/manager.py
index 73ac52b..2354879 100644
--- a/nova/network/manager.py
+++ b/nova/network/manager.py
@@ -225,7 +225,7 @@ class RPCAllocateFixedIP(object):
 
     def deallocate_fixed_ip(self, context, address, host, **kwargs):
         """Call the superclass deallocate_fixed_ip if i'm the correct host
-        otherwise cast to the correct host"""
+        otherwise call to the correct host"""
         fixed_ip = self.db.fixed_ip_get_by_address(context, address)
         network = self._get_network_by_id(context, fixed_ip['network_id'])
 
@@ -238,7 +238,7 @@ class RPCAllocateFixedIP(object):
             topic = self.db.queue_get_for(context, FLAGS.network_topic, host)
             args = {'address': address,
                     'host': host}
-            rpc.cast(context, topic,
+            rpc.call(context, topic,
                      {'method': 'deallocate_fixed_ip',
                       'args': args})
         else:
@@ -469,7 +469,7 @@ class FloatingIP(object):
                                         fixed_address, interface)
         else:
             # send to correct host
-            rpc.cast(context,
+            rpc.call(context,
                      self.db.queue_get_for(context, FLAGS.network_topic, host),
                      {'method': '_associate_floating_ip',
                       'args': {'floating_address': floating_address,
@@ -534,7 +534,7 @@ class FloatingIP(object):
             self._disassociate_floating_ip(context, address, interface)
         else:
             # send to correct host
-            rpc.cast(context,
+            rpc.call(context,
                      self.db.queue_get_for(context, FLAGS.network_topic, host),
                      {'method': '_disassociate_floating_ip',
                       'args': {'address': address,
diff --git a/nova/tests/network/test_manager.py b/nova/tests/network/test_manager.py
index 3b33296..a4b6c30 100644
--- a/nova/tests/network/test_manager.py
+++ b/nova/tests/network/test_manager.py
@@ -679,7 +679,7 @@ class VlanNetworkTestCase(test.TestCase):
         self.local = True
         self.stubs.Set(self.network.db, 'fixed_ip_get_by_address', fake4)
         self.stubs.Set(self.network.db, 'network_get', fake4_network)
-        self.stubs.Set(rpc, 'cast', fake6)
+        self.stubs.Set(rpc, 'call', fake6)
         self.network.associate_floating_ip(ctxt, mox.IgnoreArg(),
                                                  mox.IgnoreArg())
         self.assertFalse(self.local)
@@ -783,7 +783,7 @@ class VlanNetworkTestCase(test.TestCase):
         self.local = True
         self.stubs.Set(self.network.db, 'fixed_ip_get', fake4)
         self.stubs.Set(self.network.db, 'network_get', fake4_network)
-        self.stubs.Set(rpc, 'cast', fake6)
+        self.stubs.Set(rpc, 'call', fake6)
         self.network.disassociate_floating_ip(ctxt, mox.IgnoreArg())
         self.assertFalse(self.local)
 
