From 4496aaeaf19bb5fc9ce4aff47bef82acd273b902 Mon Sep 17 00:00:00 2001
From: Radek Smidl <radek.smidl@gooddata.com>
Date: Fri, 30 Aug 2013 10:52:55 +0200
Subject: [PATCH 3/5] FEATURE: PCI-1711: thin LVM support for OpenStack
 scheduler disk filter

---
 nova/compute/manager.py               |  9 +++++++++
 nova/scheduler/filters/disk_filter.py |  5 ++++-
 nova/scheduler/host_manager.py        |  3 +++
 nova/virt/libvirt/driver.py           | 17 +++++++++++++++--
 4 files changed, 31 insertions(+), 3 deletions(-)

diff --git a/nova/compute/manager.py b/nova/compute/manager.py
index e05162a..ed983ff 100644
--- a/nova/compute/manager.py
+++ b/nova/compute/manager.py
@@ -139,6 +139,13 @@ compute_opts = [
     cfg.BoolOpt('instance_usage_audit',
                default=False,
                help="Generate periodic compute.instance.exists notifications"),
+    cfg.BoolOpt('libvirt_thin_logical_volumes',
+            default=False,
+            help='Create thin provisioned logical volumes (with virtualsize)'
+                 ' if this flag is set to True.'),
+    cfg.FloatOpt('libvirt_thin_logical_volumes_overcommit',
+               default=1.5,
+               help='Maximum thin pool overcommit ratio.'),
     ]
 
 FLAGS = flags.FLAGS
@@ -2672,6 +2679,8 @@ class ComputeManager(manager.SchedulerDependentManager):
             # to be sent to the Schedulers.
             capabilities = self.driver.get_host_stats(refresh=True)
             capabilities['host_ip'] = FLAGS.my_ip
+            capabilities['thin_logical_volumes'] = FLAGS.libvirt_thin_logical_volumes
+            capabilities['thin_logical_volumes_overcommit'] = FLAGS.libvirt_thin_logical_volumes_overcommit
             self.update_service_capabilities(capabilities)
 
     @manager.periodic_task(ticks_between_runs=10)
diff --git a/nova/scheduler/filters/disk_filter.py b/nova/scheduler/filters/disk_filter.py
index 88b8c33..d564b70 100644
--- a/nova/scheduler/filters/disk_filter.py
+++ b/nova/scheduler/filters/disk_filter.py
@@ -39,7 +39,10 @@ class DiskFilter(filters.BaseHostFilter):
         free_disk_mb = host_state.free_disk_mb
         total_usable_disk_mb = host_state.total_usable_disk_gb * 1024
 
-        disk_mb_limit = total_usable_disk_mb * FLAGS.disk_allocation_ratio
+        if host_state.thin_logical_volumes and host_state.thin_logical_volumes_overcommit:
+            disk_mb_limit = total_usable_disk_mb * host_state.thin_logical_volumes_overcommit
+        else:
+            disk_mb_limit = total_usable_disk_mb * FLAGS.disk_allocation_ratio
         used_disk_mb = total_usable_disk_mb - free_disk_mb
         usable_disk_mb = disk_mb_limit - used_disk_mb
 
diff --git a/nova/scheduler/host_manager.py b/nova/scheduler/host_manager.py
index c110de1..3a2d2a6 100644
--- a/nova/scheduler/host_manager.py
+++ b/nova/scheduler/host_manager.py
@@ -117,6 +117,9 @@ class HostState(object):
             capabilities = {}
         self.capabilities = ReadOnlyDict(capabilities.get(topic, None))
         self.memory_free = self.capabilities.get('host_memory_free', None)
+        # thin LVM support
+        self.thin_logical_volumes = self.capabilities.get('thin_logical_volumes', None)
+        self.thin_logical_volumes_overcommit = self.capabilities.get('thin_logical_volumes_overcommit', None)
         if service is None:
             service = {}
         self.service = ReadOnlyDict(service)
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index 9d6cd96..7022d9c 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -192,6 +192,10 @@ libvirt_opts = [
                default='$instances_path/snapshots',
                help='Location where libvirt driver will store snapshots '
                     'before uploading them to image service'),
+    cfg.BoolOpt('libvirt_thin_logical_volumes',
+            default=False,
+            help='Create thin provisioned logical volumes (with virtualsize)'
+                 ' if this flag is set to True.'),
     ]
 
 FLAGS = flags.FLAGS
@@ -2097,7 +2101,12 @@ class LibvirtDriver(driver.ComputeDriver):
             stats = libvirt_utils.get_fs_info(FLAGS.instances_path)
             return stats['total'] / (1024 ** 3)
         else:
-            out = libvirt_utils.volume_group_total_space(FLAGS.libvirt_images_volume_group)
+            if FLAGS.libvirt_thin_logical_volumes == True:
+                pool_name = "%s-pool" % FLAGS.libvirt_images_volume_group
+                pool_path = '%s/%s' % (FLAGS.libvirt_images_volume_group, pool_name)
+                out = libvirt_utils.logical_volume_size(pool_path)
+            else:
+                out = libvirt_utils.volume_group_total_space(FLAGS.libvirt_images_volume_group)
             return int(out / 1024 ** 3)
 
     def get_vcpu_used(self):
@@ -2180,7 +2189,11 @@ class LibvirtDriver(driver.ComputeDriver):
             stats = libvirt_utils.get_fs_info(FLAGS.instances_path)
             return stats['used'] / (1024 ** 3)
         else:
-            out = libvirt_utils.volume_group_total_space(FLAGS.libvirt_images_volume_group) - libvirt_utils.volume_group_free_space(FLAGS.libvirt_images_volume_group)
+            if FLAGS.libvirt_thin_logical_volumes == True:
+                pool_name = "%s-pool" % FLAGS.libvirt_images_volume_group
+                out = utils.thin_pool_allocated_size(pool_name)
+            else:
+                out = libvirt_utils.volume_group_total_space(FLAGS.libvirt_images_volume_group) - libvirt_utils.volume_group_free_space(FLAGS.libvirt_images_volume_group)
             return int(out / 1024 ** 3)
 
     def get_hypervisor_type(self):
-- 
1.8.3.4

