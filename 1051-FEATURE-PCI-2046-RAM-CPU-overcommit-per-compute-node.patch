From 645fe754da81f2543ad69ebb445cdfcd2529ad9f Mon Sep 17 00:00:00 2001
From: Tomas Dubec <tomas.dubec@gooddata.com>
Date: Mon, 2 Sep 2013 08:03:40 +0200
Subject: [PATCH 4/5] FEATURE: PCI-2046 RAM/CPU overcommit per compute node

---
 nova/compute/manager.py               |  8 ++++++++
 nova/scheduler/filters/core_filter.py | 13 ++++++++++++-
 nova/scheduler/filters/ram_filter.py  | 11 ++++++++++-
 nova/scheduler/host_manager.py        | 10 ++++++++--
 4 files changed, 38 insertions(+), 4 deletions(-)

diff --git a/nova/compute/manager.py b/nova/compute/manager.py
index ed983ff..1c1ec85 100644
--- a/nova/compute/manager.py
+++ b/nova/compute/manager.py
@@ -146,6 +146,12 @@ compute_opts = [
     cfg.FloatOpt('libvirt_thin_logical_volumes_overcommit',
                default=1.5,
                help='Maximum thin pool overcommit ratio.'),
+    cfg.FloatOpt('cpu_compute_ratio',
+                 default=16,
+                 help='Virtual CPU to Physical CPU allocation ratio'),
+    cfg.FloatOpt('ram_compute_ratio',
+                 default=1.5,
+                 help='Virtual ram to physical ram allocation ratio'),
     ]
 
 FLAGS = flags.FLAGS
@@ -2681,6 +2687,8 @@ class ComputeManager(manager.SchedulerDependentManager):
             capabilities['host_ip'] = FLAGS.my_ip
             capabilities['thin_logical_volumes'] = FLAGS.libvirt_thin_logical_volumes
             capabilities['thin_logical_volumes_overcommit'] = FLAGS.libvirt_thin_logical_volumes_overcommit
+            capabilities['ram_compute_ratio'] = FLAGS.ram_compute_ratio
+            capabilities['cpu_compute_ratio'] = FLAGS.cpu_compute_ratio
             self.update_service_capabilities(capabilities)
 
     @manager.periodic_task(ticks_between_runs=10)
diff --git a/nova/scheduler/filters/core_filter.py b/nova/scheduler/filters/core_filter.py
index 98b0930..441a15b 100644
--- a/nova/scheduler/filters/core_filter.py
+++ b/nova/scheduler/filters/core_filter.py
@@ -46,7 +46,18 @@ class CoreFilter(filters.BaseHostFilter):
             return True
 
         instance_vcpus = instance_type['vcpus']
-        vcpus_total = host_state.vcpus_total * FLAGS.cpu_allocation_ratio
+
+        try:
+            if host_state.cpu_compute_ratio is not None:
+                cpu_allocation_ratio = host_state.cpu_compute_ratio
+            else:
+                cpu_allocation_ratio = FLAGS.cpu_allocation_ratio
+        except:
+            cpu_allocation_ratio = FLAGS.cpu_allocation_ratio
+
+        LOG.debug(_("CPU allocation ratio was set to %f") % cpu_allocation_ratio)
+
+        vcpus_total = host_state.vcpus_total * cpu_allocation_ratio
 
         # Only provide a VCPU limit to compute if the virt driver is reporting
         # an accurate count of installed VCPUs. (XenServer driver does not)
diff --git a/nova/scheduler/filters/ram_filter.py b/nova/scheduler/filters/ram_filter.py
index 22ba025..9c8f325 100644
--- a/nova/scheduler/filters/ram_filter.py
+++ b/nova/scheduler/filters/ram_filter.py
@@ -38,8 +38,17 @@ class RamFilter(filters.BaseHostFilter):
         requested_ram = instance_type['memory_mb']
         free_ram_mb = host_state.free_ram_mb
         total_usable_ram_mb = host_state.total_usable_ram_mb
+        try:
+            if host_state.ram_compute_ratio is not None:
+                ram_allocation_ratio = host_state.ram_compute_ratio
+            else:
+                ram_allocation_ratio = FLAGS.ram_allocation_ratio
+        except:
+            ram_allocation_ratio = FLAGS.ram_allocation_ratio
 
-        memory_mb_limit = total_usable_ram_mb * FLAGS.ram_allocation_ratio
+        LOG.debug(_("RAM allocation ratio was set to %f") % ram_allocation_ratio)
+
+        memory_mb_limit = total_usable_ram_mb * ram_allocation_ratio
         used_ram_mb = total_usable_ram_mb - free_ram_mb
         usable_ram = memory_mb_limit - used_ram_mb
         if not usable_ram >= requested_ram:
diff --git a/nova/scheduler/host_manager.py b/nova/scheduler/host_manager.py
index 3a2d2a6..f3ed2f1 100644
--- a/nova/scheduler/host_manager.py
+++ b/nova/scheduler/host_manager.py
@@ -94,6 +94,10 @@ class HostState(object):
     def __init__(self, host, topic, capabilities=None, service=None):
         self.host = host
         self.topic = topic
+        # RAM/CPU overcommit ratio per comupte node
+        self.ram_compute_ratio = 1.0
+        self.cpu_compute_ratio = 1.0
+
         self.update_capabilities(topic, capabilities, service)
 
         # Mutable available resources.
@@ -117,6 +121,8 @@ class HostState(object):
             capabilities = {}
         self.capabilities = ReadOnlyDict(capabilities.get(topic, None))
         self.memory_free = self.capabilities.get('host_memory_free', None)
+        self.ram_compute_ratio = self.capabilities.get('ram_compute_ratio', None)
+        self.cpu_compute_ratio = self.capabilities.get('cpu_compute_ratio', None)
         # thin LVM support
         self.thin_logical_volumes = self.capabilities.get('thin_logical_volumes', None)
         self.thin_logical_volumes_overcommit = self.capabilities.get('thin_logical_volumes_overcommit', None)
@@ -184,8 +190,8 @@ class HostState(object):
         return True
 
     def __repr__(self):
-        return ("host '%s': free_ram_mb:%s free_disk_mb:%s memory_free:%s" %
-                (self.host, self.free_ram_mb, self.free_disk_mb, self.memory_free))
+        return ("host '%s': free_ram_mb:%s free_disk_mb:%s memory_free:%s cpu_compute_ratio:%s ram_compute_ratio:%s" %
+                (self.host, self.free_ram_mb, self.free_disk_mb, self.memory_free, self.cpu_compute_ratio, self.ram_compute_ratio))
 
 class HostManager(object):
     """Base HostManager class."""
-- 
1.8.3.4

